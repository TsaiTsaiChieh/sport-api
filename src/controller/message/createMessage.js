const ajv = require('../../util/ajvUtil');
const model = require('../../model/message/createMessage');
const httpStatus = require('http-status');
const { logger } = require('firebase-functions');

async function createMessage(req, res) {
  const now = new Date();
  const schema = {
    type: 'object',
    required: ['message'],
    properties: {
      message: {
        type: 'object',
        required: ['channelId', 'message', 'type'],
        properties: {
          channelId: {
            type: 'string',
            enum: ['public'] // enum possible channel name
          },
          message: {
            type: 'string'
          },
          type: {
            type: 'string',
            // message type
            enum: [
              'text',
              'image/jpeg',
              'image/png',
              'video/mp4',
              'video/quicktime'
            ]
          }
        },
        if: {
          properties: {
            type: {
              enum: ['image/jpeg', 'image/png', 'video/mp4', 'video/quicktime']
            }
          }
        },
        then: {
          properties: {
            message: {
              type: 'string',
              format: 'imgURL'
            },
            thumbURL: {
              type: 'string',
              format: 'imgURL'
            }
          }
        }
      },
      reply: {
        type: 'object',
        required: ['messageId'],
        properties: {
          messageId: {
            type: 'string'
          }
        }
      }
    }
  };

  const valid = ajv.validate(schema, req.body);
  if (!valid) return res.status(httpStatus.BAD_REQUEST).json(ajv.errors);

  req.body.token = req.token;
  req.body.now = now;
  try {
    res.json(await model(req.body));
  } catch (err) {
    logger.debug(err.stack);
    res
      .status(err.code)
      .json(
        err.isPublic
          ? { error: err.name, devcode: err.status, message: err.message }
          : err.code
      );
  }
}

module.exports = createMessage;
/**
 * @api {post} /messages 傳送訊息
 * @apiVersion 1.2.0
 * @apiDescription The front-end can only listen to the realtime database and ignore the results of successful JSON responses, and the data structure of the realtime database can refer to the Success-Response of this document by Tsai-Chieh
 * @apiName Create or reply a message/file
 * @apiGroup Messages
 * @apiPermission login user with completed data
 *
 * @apiParam (Request cookie) {token} __session token generate from firebase Admin SDK
 * @apiParam {Object} message message data
 * @apiParam {String} message.channelId currently only `public`, may increase in the future
 * @apiParam {String} message.message message content, plain text or URL
 * @apiParam {String} [message.thumbURL] image or video thumbnail URL
 * @apiParam {String} message.type message type, the value enum are: `text`, `image/jpeg`, `image/png`, `video/mp4`, `video/quicktime`. If the message content is not plain text, message must be a URL
 * @apiParam {Object} [reply] optional reply message id
 * @apiParam {String} [reply.messageId] reply message id
 *
 * @apiParamExample {JSON} Request-Example
 * {
 *    "message": {
 *		    "channelId": "public",
 *		    "message": "test123",
 *		    "type": "text"
 *     },
 *     "reply": {
 *	      "messageId": "dPqN20XQnbWNRLNr5Ohe"
 *      }
 * }
 * @apiParamExample {JSON} Request-Example
 * {
 *    "message": {
 *		    "channelId": "public",
 *		    "message": "test123",
 *		    "type": "text"
 *       }
 * }
 *  @apiParamExample {JSON} Request-Example
 * {
 *    "message": {
 *		    "channelId": "public",
 *		    "message": "https://png.pngtree.com/element_our/20190528/ourmid/pngtree-small-url-icon-opened-on-the-computer-image_1132275.jpg",
 *        "thumbURL": "https://png.pngtree.com/element_our/20190528/ourmid/pngtree-small-url-icon-opened-on-the-computer-image_1132275.jpg",
 *		    "type": "image/jpeg"
 *       }
 * }
 * @apiSuccess {Object} createTime firebase format, contain seconds and nanoseconds
 * @apiSuccess {Object} message message data
 * @apiSuccess {Object} user user data
 * @apiSuccess {Object} [reply] reply data, include message and user object, not repeat again
 *
 * @apiSuccess {String} message.channelId return channel id
 * @apiSuccess {String} message.message return message content, plain text or URL
 * @apiSuccess {String} message.messageId unique id which firebase automated generated for message
 * @apiSuccess {String} message.softDelete whether the message has been deleted, -1: admin delete, 0: user retract (收回), 1: user delete (刪除), 2: normal (default)
 * @apiSuccess {String} message.tempHash return random string generated by the front-end
 * @apiSuccess {String} message.type return message type
 *
 * @apiSuccess {String} user.avatar user avatar URL

 * @apiSuccess {Object} user.defaultTitle user URL, must choose from titles field, 若為一般玩家，則為 null
 * @apiSuccess {String} [user.defaultTitle.league] league nested default title
 * @apiSuccess {Number} [user.defaultTitle.sport] sport nested default title
 * @apiSuccess {String} [user.defaultTitle.rank] rank nested default title
 * @apiSuccess {String} user.displayName user  URL, must be unique
 * @apiSuccess {Number} user.status user role, -1: locked user, 0: incomplete profile which registered user, 1: normal user, 2: god user, 9: admin
 * @apiSuccess {String} user.uid user unique id, firebase automated generated
 *
 * @apiSuccessExample {JSON} Success-Response
 *  HTTP/1.1 200 OK
 * {
    "message": {
        "channelId": "public",
        "message": "可下班嗎",
        "type": "text",
        "messageId": "YXOiFKn1jTTELdoQzO6C"
    },
    "user": {
        "uid": "Xw4dOKa4mWh3Kvlx35mPtAOX2P52",
        "displayName": "ㄘㄐ",
        "avatar": "https://firebasestorage.googleapis.com/v0/b/sportslottery-test.appspot.com/o/avatar%2FXw4dOKa4mWh3Kvlx35mPtAOX2P52%2Frabbit.jpeg?alt=media&token=4f675fd9-b0b1-489a-8e25-f7305db5a0bd",
        "status": 2,
        "defaultTitle": {
            "rank": 1,
            "league": "KBO",
            "sport": 16
        }
    },
    "createTime": {
        "_seconds": 1597228139,
        "_nanoseconds": 48000000
    },
    "reply": {
        "channelId": "public",
        "message": "??",
        "type": "text",
        "messageId": "MmF8Z4qK3YtGSSyhPAnN",
        "user": {
            "defaultTitle": {
                "sport": 16,
                "ranK": 1,
                "league": "KBO"
            },
            "avatar": "https://firebasestorage.googleapis.com/v0/b/sportslottery-test.appspot.com/o/avatar%2FXw4dOKa4mWh3Kvlx35mPtAOX2P52%2Frabbit.jpeg?alt=media&token=4f675fd9-b0b1-489a-8e25-f7305db5a0bd",
            "status": 2,
            "displayName": "ㄘㄐ",
            "uid": "Xw4dOKa4mWh3Kvlx35mPtAOX2P52"
        }
    }
}
 *
 @apiSuccessExample {JSON} Success-Response
 *  HTTP/1.1 200 OK
 * {
    "message": {
        "channelId": "public",
        "message": "做好事情才可喔",
        "type": "text",
        "messageId": "j1LJmkv8ByGKsp5QsGcp",
        "softDelete": 2
    },
    "user": {
        "uid": "Xw4dOKa4mWh3Kvlx35mPtAOX2P52",
        "displayName": "ㄘㄐ",
        "avatar": "https://firebasestorage.googleapis.com/v0/b/sportslottery-test.appspot.com/o/avatar%2FXw4dOKa4mWh3Kvlx35mPtAOX2P52%2Frabbit.jpeg?alt=media&token=4f675fd9-b0b1-489a-8e25-f7305db5a0bd",
        "status": 2,
        "defaultTitle": {
            "rank": 1,
            "league": "KBO",
            "sport": 16
        }
    },
    "createTime": {
        "_seconds": 1597237716,
        "_nanoseconds": 127000000
    }
}
 * @apiError 400 Bad Request
 * @apiError 401 Unauthorized
 * @apiError 403 Forbidden
 * @apiError 404 Not Found
 * @apiError 500 Internal Server Error
 *
 * @apiErrorExample {JSON} 400-Response
 * HTTP/1.1 400 Bad Request
 * [
   {
        "keyword": "enum",
        "dataPath": ".message.channelId",
        "schemaPath": "#/properties/message/properties/channelId/enum",
        "params": {
            "allowedValues": [
                "public"
            ]
        },
        "message": "should be equal to one of the allowed values"
    },
    {
        "keyword": "enum",
        "dataPath": ".message.type",
        "schemaPath": "#/properties/message/properties/type/enum",
        "params": {
            "allowedValues": [
                "text",
                "image/jpeg",
                "image/png",
                "video/mp4",
                "video/quicktime"
            ]
        },
        "message": "should be equal to one of the allowed values"
    }
]
 *
 * @apiErrorExample {JSON} 400-Response
 * HTTP/1.1 400 Bad Request
 * [
    {
        "keyword": "format",
        "dataPath": ".message.message",
        "schemaPath": "#/properties/message/then/properties/message/format",
        "params": {
            "format": "url"
        },
        "message": "should match format \"url\""
    },
    {
        "keyword": "if",
        "dataPath": ".message",
        "schemaPath": "#/properties/message/if",
        "params": {
            "failingKeyword": "then"
        },
        "message": "should match \"then\" schema"
    }
]
* @apiErrorExample {JSON} 400-Response
* HTTP/1.1 400 Bad Request
[
    {
        "keyword": "format",
        "dataPath": ".message.thumbURL",
        "schemaPath": "#/properties/message/then/properties/thumbURL/format",
        "params": {
            "format": "url"
        },
        "message": "should match format \"url\""
    },
    {
        "keyword": "if",
        "dataPath": ".message",
        "schemaPath": "#/properties/message/if",
        "params": {
            "failingKeyword": "then"
        },
        "message": "should match \"then\" schema"
    }
]
 * @apiErrorExample {JSON} 401-Response
 * HTTP/1.1 401 Unauthorized
 * {
    "code": 401,
    "error": "Unauthorized"
}
 * @apiErrorExample {JSON} 403-Response
 * HTTP/1.1 403 Forbidden
 * {
    "code": 403,
    "error": "user had been muted"
}
 * @apiErrorExample {JSON} 403-Response
 * HTTP/1.1 403 Forbidden
 * {
    "code": 403,
    "error": "can not reply message which deleted by user himself/herself"
}
 * @apiErrorExample {JSON} 404-Response
 * HTTP/1.1 404 Not Found
 * {
    "code": 404,
    "error": "user not found"
}
 * @apiErrorExample {JSON} 404-Response
 * HTTP/1.1 404 Not Found
 * {
    "code": 404,
    "error": "message/file not found"
}
 * @apiErrorExample {JSON} 500-Response
 * HTTP/1.1 500 Internal Server Error
 * {
    "code": 500,
    "error": {}
}
 */
