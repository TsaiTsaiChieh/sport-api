/* eslint-disable promise/always-return */
/* eslint-disable prefer-arrow-callback */
const modules = require('../../util/modules');
const messageModel = require('../../model/message/deleteMessageWithId');

function deleteMessageWithId(req, res) {
  const schema = {
    type: 'object',
    required: ['messageId', 'channelId', 'deleteAction'],
    properties: {
      messageId: { type: 'string' },
      channelId: { type: 'string', enum: ['public'] },
      deleteAction: { type: 'integer', minimum: -1, maximum: 1 }
    }
  };
  const args = {};
  args.messageId = req.params.id;
  args.channelId = req.body.channelId;
  args.deleteAction = req.body.deleteAction; // use ajv module, so don't parse int
  args.token = req.token; // get from verification middleware

  const valid = modules.ajv.validate(schema, args);

  if (!valid) {
    res.status(400).json(modules.ajv.errors);
    return;
  }
  messageModel(args)
    .then(function(body) {
      res.json(body);
    })
    .catch(function(err) {
      res.status(err.code).send(err.error);
    });
}

module.exports = deleteMessageWithId;

/**
 * @api {delete} /messages:id deleteMessage
 * @apiVersion 1.0.0
 * @apiDescription The front-end can only listen to the message which masked after deleting action in the realtime database 
 * @apiName Soft delete message
 * @apiGroup Messages
 * @apiPermission login user with completed data
 *
 * @apiParam (Request cookie) {token} __session token generate from firebase Admin SDK
 * @apiParam {Number} deleteAction delete action for message
 *
 * @apiParamExample {JSON} Request-Example
 * {
 *     "channelId": "public",
 *     "deleteAction": 1
 * }
 * @apiSuccess {Object} createTime firebase format, contain seconds and nanoseconds
 * @apiSuccess {Object} message message data
 * @apiSuccess {Object} user user data
 * @apiSuccess {Object} [reply] reply data, include message and user object, not repeat again
 * 
 * @apiSuccess {String} message.channelId return channel id
 * @apiSuccess {String} message.message return message content, plain text or URL
 * @apiSuccess {String} message.messageId unique id which firebase automated generated for message
 * @apiSuccess {String} message.softDelete whether the message has been deleted, -1: admin delete, 0: user retract (收回), 1: user delete (刪除), 2: normal (default)
 * @apiSuccess {String} message.tempHash return random string generated by the front-end
 * @apiSuccess {String} message.type return message type
 *
 * @apiSuccess {String} user.avatar user avater URL
 * @apiSuccess {Object} user.blockMessage user avater URL, firebase format, contain seconds and nanoseconds
 * @apiSuccess {Number} user.blockMessage._seconds 
 * @apiSuccess {Number} user.blockMessage._nanoseconds
 * @apiSuccess {Object} [user.defaultTitle] user URL, must choosed from titles field
 * @apiSuccess {String} [user.defaultTitle.league] league nested default title 
 * @apiSuccess {Number} [user.defaultTitle.sport] sport nested default title 
 * @apiSuccess {String} [user.defaultTitle.rank] rank nested default title 
 * @apiSuccess {String} user.displayName user  URL, must be unique
 * @apiSuccess {Number} user.point points earned by user
 * @apiSuccess {Number} user.role user role, -1: locked user, 0: incomplete profile which registered user, 1: normal user, 2: god user, 9: admin
 * @apiSuccess {String} user.signatue user setting signatue
 * @apiSuccess {String[]} [user.titles] titles obtained by user
 * @apiSuccess {String} user.uid user unique id, firebase automated generated
 * 
 * @apiSuccessExample {JSON} Success-Response
 *  HTTP/1.1 200 OK
 * {
 *    "Delete message id: 24rzsNJ4DsikbpmfwPGg successful"
 * }
 * @apiError 400 Bad Request
 * @apiError 401 Unauthorized
 * @apiError 403 Forbidden
 * @apiError 404 Not Found
 * @apiError 410 Gone
 * @apiError 500 Internal Server Error
 *
 * @apiErrorExample {JSON} 400-Response
 * HTTP/1.1 400 Bad Request
 * [
    {
        "keyword": "maximum",
        "dataPath": ".deleteAction",
        "schemaPath": "#/properties/deleteAction/maximum",
        "params": {
            "comparison": "<=",
            "limit": 1,
            "exclusive": false
        },
        "message": "should be <= 1"
    }
]
 * 
 * @apiErrorExample {JSON} 400-Response
 * HTTP/1.1 400 Bad Request
 * [[
    {
        "keyword": "required",
        "dataPath": "",
        "schemaPath": "#/required",
        "params": {
            "missingProperty": "channelId"
        },
        "message": "should have required property 'channelId'"
    },
    {
        "keyword": "required",
        "dataPath": "",
        "schemaPath": "#/required",
        "params": {
            "missingProperty": "deleteAction"
        },
        "message": "should have required property 'deleteAction'"
    }
]
 * @apiErrorExample {JSON} 401-Response
 * HTTP/1.1 401 Unauthorized
 * {
    "code": 401,
    "error": "Unauthorized"
}
 * @apiErrorExample {JSON} 403-Response
 * HTTP/1.1 403 Forbidden
 * {
    "code": 403,
    "error": "user had been muted"
}
 * @apiErrorExample {JSON} 403-Response
 * HTTP/1.1 403 Forbidden
 * {
    "code": 403,
    "error": "can not reply message which deleted by user himself/herself"
}
 * @apiErrorExample {JSON} 404-Response
 * HTTP/1.1 404 Not Found
 * {
    "code": 404,
    "error": "message/file not found"
}
 * @apiErrorExample {JSON} 410-Response
 * HTTP/1.1 410 Gone
 * {
    "code": 410,
    "error": "message/file had been deleted'"
}
 * @apiErrorExample {JSON} 500-Response
 * HTTP/1.1 500 Internal Server Error
 * {
    "code": 500,
    "error": {}
}
 */
